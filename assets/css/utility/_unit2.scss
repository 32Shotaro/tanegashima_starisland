@charset "utf-8";
@use '../variables' as vars;

// Define the str-replace function if it isn't already defined
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// --------------------
// 単位のユーティリティ
// --------------------

@mixin unified-utility($config) {
  @each $prefix, $settings in $config {
    $property: map-get($settings, 'property');
    $values: map-get($settings, 'values');
    $unit: if(map-has-key($settings, 'unit'), map-get($settings, 'unit'), '');

    @if type-of($values) == 'list' {
      // 値が範囲リストの場合
      $generated-values: generate-dynamic-values($values);
      @each $value in $generated-values {
        $sanitized-value: str-replace(inspect($value), '.', ''); // 修正: inspectを追加

        // デバッグ用
        @debug $prefix;
        @debug $sanitized-value;

        @if type-of($property) == 'list' {
          .#{$prefix}#{$sanitized-value} {
            @each $prop in $property {
              #{$prop}: #{$value}#{$unit};
            }
          }
        } @else {
          .#{$prefix}#{$sanitized-value} {
            #{$property}: #{$value}#{$unit};
          }
        }
      }
    } @else if type-of($values) == 'map' {
      // 値がマップの場合
      @each $key, $value in $values {
        @if $key == 'default' {
          // defaultの場合、クラス名から`-default`を省略
          @if type-of($property) == 'list' {
            .#{$prefix} {
              @each $prop in $property {
                #{$prop}: $value;
              }
            }
          } @else {
            .#{$prefix} {
              #{$property}: $value;
            }
          }
        } @else {
          @if type-of($property) == 'list' {
            .#{$prefix}-#{$key} {
              @each $prop in $property {
                #{$prop}: $value;
              }
            }
          } @else {
            .#{$prefix}-#{$key} {
              #{$property}: $value;
            }
          }
        }
      }
    }

    // 各ブレイクポイント対応
    @each $breakpoint, $size in vars.$breakpoints {
      @include vars.respond-to($breakpoint, 'max') {
        @if type-of($values) == 'list' {
          @each $value in $generated-values {
            $sanitized-value: str-replace(inspect($value), '.', ''); // 修正: inspectを追加

            // デバッグ用
            @debug $breakpoint;
            @debug $sanitized-value;

            @if type-of($property) == 'list' {
              .#{$breakpoint}-#{$prefix}#{$sanitized-value} {
                @each $prop in $property {
                  #{$prop}: #{$value}#{$unit};
                }
              }
            } @else {
              .#{$breakpoint}-#{$prefix}#{$sanitized-value} {
                #{$property}: #{$value}#{$unit};
              }
            }
          }
        } @else if type-of($values) == 'map' {
          @each $key, $value in $values {
            @if $key == 'default' {
              @if type-of($property) == 'list' {
                .#{$breakpoint}-#{$prefix} {
                  @each $prop in $property {
                    #{$prop}: $value;
                  }
                }
              } @else {
                .#{$breakpoint}-#{$prefix} {
                  #{$property}: $value;
                }
              }
            } @else {
              @if type-of($property) == 'list' {
                .#{$breakpoint}-#{$prefix}-#{$key} {
                  @each $prop in $property {
                    #{$prop}: $value;
                  }
                }
              } @else {
                .#{$breakpoint}-#{$prefix}-#{$key} {
                  #{$property}: $value;
                }
              }
            }
          }
        }
      }
    }
  }
}

// Example usage of the mixin
@include unified-utility(
  (
    'm': (
      'property': 'margin',
      'values': (
        (-200, -25, 5),
        (-20, 0, 1),
        (0, 20, 1),
        (25, 200, 5),
      ),
      'unit': 'px',
    ),
    'mt': (
      'property': 'margin-top',
      'values': (
        (-200, -25, 5),
        (-20, 0, 1),
        (0, 20, 1),
        (25, 200, 5),
      ),
      'unit': 'px',
    ),
    'ml': (
      'property': 'margin-left',
      'values': (
        'default': 'auto',
        'a': 'auto',
      ),
    ),
  )
);
